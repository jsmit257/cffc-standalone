#
# more detailed information about this file can be found here:
# https://github.com/jsmit257/cffc-standalone/master/README.md
#
---

services:

  huautla:
    #
    # a standalone postgres server that stores production data on a 
    # volume mount; use the migration service to initialize it for the
    # first run, and backup/restore services for routine maintenance 
    # and disaster recovery
    #
    # you should disable port forwarding unless you think you'll be 
    # poking around the SQL from a local client
    #
    image: postgres:bookworm
    restart: always
    hostname: huautla
    # ports: [ 5436:5432 ]
    volumes: [ "./huautla-data:/var/lib/postgresql/data" ]
    env_file: [ ./env/secrets ]
    # FIXME: is this handled on startup, yet?
    #entrypoint: chown -Rv postgres:postgres /var/lib/postgresql

  us-authn:
    #
    # handles login and password reset management tokens; there's no 
    # compelling argument for saving redis' state; the worst case from
    # losing this service is a user has to re-login or re-request a 
    # password reset; we don't currently enable any security
    #
    image: redis:bookworm
    restart: always
    hostname: usauthn

  us-db:
    #
    # a standalone mysql server for authentication/authorization data
    # stored on a volume mount since this data needs to be preserved 
    # across restarts
    #
    image: percona:ps-8.0.36-28
    restart: always
    hostname: usdb
    volumes: [ "./authnz-data:/var/lib/mysql" ]
    env_file: [ ./env/secrets ]

  us-maild:
    #
    # a proxy smtp server used by us-srv when servicing a password
    # reset through email
    #
    image: bytemark/smtp
    restart: always
    hostname: usmaild
    env_file:
      - ./env/template
      - ./env/secrets

  us-srv:
    #
    # an api server that coordinates authentication/authorization 
    # data from us-db and login management services from us-authn;
    # it exports a single library function for use by the cffc-api 
    # service to check each inbound request is authorized; a failure
    # response includes a Location to a login module hosted on the 
    # us-web service
    #
    depends_on:
      - us-db
      - us-authn
      - us-maild
    image: jsmit257/us-srv-mysql:lkg
    hostname: ussrv
    restart: always
    env_file:
      - ./env/template
      - ./env/secrets

  us-web:
    #
    # hosts the login page on a standalone nginx server; this is only 
    # visible when proxied through cffc-web so all resources are rooted
    # in the same domain; this isn't technically necessary, but it makes
    # client-facing resource management easier
    #
    depends_on: [ us-srv ]
    image: jsmit257/us-web:lkg
    hostname: usweb
    restart: always
    volumes: [ ./usweb/css:/www/css ]
    env_file: [ ./env/template ]

  cffc-api:
    #
    # serves all the client api's for managing the huautla database;
    # these are made public through the cffc-web service
    #
    depends_on:
      - huautla
      - us-srv
    image: jsmit257/cffc:lkg
    restart: always
    hostname: cffc-api
    volumes: [ ./album:/album ]
    env_file:
      - ./env/template
      - ./env/secrets
    environment:
      GOCOVERDIR: /tmp

  cffc-web:
    #
    # hosts the static resources for the client huautla interface, proxies
    # requests for the cffc-api server, and prozies the entire userservice
    # application under the path `/authnz`
    #
    depends_on:
      - cffc-api
      - us-web
    image: jsmit257/cffc-web:lkg
    restart: always
    hostname: cffc-web
    ports:
      - 10080:80
      - 10443:443
    volumes:
      - ./background:/www/css/images/background
      - ./album:/album
    env_file:
      - ./env/template
      - ./env/secrets

  huautla-source:
    #
    # provides the seed data to initialize a new huautla instance; this 
    # service is started by huautla-initialization and should be shutdown 
    # when initialization is finished running
    #
    image: jsmit257/huautla:lkg
    restart: always
    hostname: huautla-source
    env_file: [ ./env/secrets ]

  huautla-initialization:
    #
    # creates a persistent store for huautla data on the host filesystem so 
    # changes aren't lost between restarts; only run this once for a fresh
    # install (although you could start as many fresh installs as you like);
    #
    # it attatches to the same volume used by the huautla service and thus,
    # should not be running at the same time as huautla; once seeded, you won't
    # need to run this service ever again
    #
    depends_on: [ huautla-source ]
    image: jsmit257/huautla:lkg
    hostname: huautla-initialization
    volumes: [ "./huautla-data:/var/lib/postgresql/data" ]
    env_file:
      - ./env/template
      - ./env/secrets
    entrypoint: /migration-entrypoint.sh

  huautla-backup:
    #
    # this is fine to run against a live server; it leaves an archive in the 
    # host's `huautla-backups` directory; use the archive to restore an errant 
    # database to some other point in time using huautla-restore
    #
    # backup and restore *connect* to the live service, unlike huautla-initialization
    # that runs once *instead of* the live service, so they needs no `.../data/` 
    # volume
    #
    # it would be a very good ideaâ„¢ to schedule this to run periodically,
    # and perhaps wipe old archives while we're at it; it would also be good 
    # to ship the archives elsewhere in case of local hardware failure
    #
    depends_on:
      - huautla
    image: jsmit257/huautla:lkg
    hostname: huautla-backup
    volumes: [ "./huautla-backups:/pgbackup" ]
    env_file:
      - ./env/template
      - ./env/secrets
    entrypoint: /backup-entrypoint.sh

  huautla-restore:
    #
    # usage: RESTORE_POINT=<archive> docker-compose up --remove-orphans huautla-restore
    #
    # restores the specified database to the state contained in <archive>; you
    # can find archives in the host directory called 'huautla-backups/'; the 
    # filenames are modified ISO timestamps like YYYYmmDDTHHMMSS, meaning 
    # year/month/day/hour/minute/second, so you can sort by name descending and 
    # get the latest archive names at the top, or choose an earlier one before any
    # corruption happened; for convenience, the most recent backup is symlinked
    # to the file named 'latest'
    #
    depends_on:
      - huautla
    image: jsmit257/huautla:lkg
    hostname: huautla-restore
    volumes: [ "./huautla-backups:/pgbackup" ]
    env_file:
      - ./env/template
      - ./env/secrets
    environment:
      RESTORE_POINT: ${RESTORE_POINT}
    entrypoint: /restore-entrypoint.sh

  userservice-initialization:
    #
    # works similarly to huautla-initialization, but it doesn't need seed data, so there's
    # no corresponding huautla-source service; this image contains the initialization
    # sql to build the database and leverages percona's default startup behavior to 
    # run it; this only needs to run once
    #
    image: jsmit257/us-db-mysql-mig:lkg
    volumes: [ "./authnz-data:/var/lib/mysql" ]
    entrypoint: /var/lib/mysql-files/install-userservice.sh mysqld
    # entrypoint: chown -Rv mysql:mysql /var/lib/mysql

  userservice-backup:
    #
    # TODO: implement this in the us-db-mysql-mig image
    #
    image: jsmit257/us-db-mysql-mig:lkg
    volumes: [ "./authnz-backups:/authnz-backups" ]
    env_file:
      - ./env/template
      - ./env/secrets
    entrypoint: sleep 5m

  userservice-restore:
    #
    # TODO: implement this in the us-db-mysql-mig image
    #
    image: alpine:edge #jsmit257/us-db-mysql-mig:lkg
    volumes: [ "./authnz-backups:/authnz-backups" ]
    env_file:
      - ./env/template
      - ./env/secrets
    entrypoint: sleep 5m
