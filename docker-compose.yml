#
# more detailed information about this file can be found here:
# https://github.com/jsmit257/cffc-standalone/blob/master/README.md
#
---

x-configs: &envs
  - ./env/template
  - ./env/secrets
x-album-vol: &photos "./album/:/album/"

services:

  huautla:
    #
    # a standalone postgres server that stores production data on a 
    # volume mount; use the migration service to initialize it for the
    # first run, and backup/restore services for routine maintenance 
    # and disaster recovery
    #
    image: postgres:bookworm
    restart: always
    hostname: huautla
    volumes: [ "./persistence/huautla/data:/var/lib/postgresql/data" ]
    env_file: [ ./env/secrets ]

  us-authn:
    #
    # handles login and password reset management tokens; there's no 
    # compelling argument for saving redis' state; the worst case from
    # losing this service is a user has to re-login or re-request a 
    # password reset; we don't currently enable any security
    #
    image: redis:bookworm
    restart: always
    hostname: usauthn

  us-db:
    #
    # a standalone mysql server for authentication/authorization data
    # stored on a volume mount since this data needs to be preserved 
    # across restarts; use the us-initialize service to seed this
    # for a new install
    #
    image: percona:ps-8.0.36-28
    restart: always
    hostname: usdb
    volumes: [ "./persistence/authnz/data:/var/lib/mysql" ]
    env_file: [ ./env/secrets ]

  us-maild:
    #
    # a proxy smtp server used by us-srv when servicing a password
    # reset through email
    #
    image: bytemark/smtp
    restart: always
    hostname: usmaild
    env_file: *envs

  us-srv:
    #
    # an api server that coordinates authentication/authorization 
    # data from us-db and login management services from us-authn;
    # it exports a single library function for use by the cffc-api 
    # service to check each inbound request is authorized; a failure
    # response includes a Location to a login module hosted on the 
    # us-web service
    #
    depends_on:
      - us-db
      - us-authn
      - us-maild
    image: jsmit257/us-srv-mysql:lkg
    pull_policy: daily
    restart: always
    hostname: ussrv
    env_file: *envs

  us-web:
    #
    # hosts the login page on a standalone nginx server; this is only 
    # visible when proxied through cffc-web so all resources are rooted
    # in the same domain; this isn't technically necessary, but it makes
    # client-facing resource management easier
    #
    depends_on: [ us-srv ]
    image: jsmit257/us-web:lkg
    pull_policy: daily
    restart: always
    hostname: usweb
    # volumes: 
    #   - ./www/css/:/www/css/
    #   - ./www/js/:/www/js/
    env_file: [ ./env/template ]

  cffc-api:
    #
    # serves all the client api's for managing the huautla database;
    # these are made public through the cffc-web service
    #
    depends_on:
      - huautla
      - us-srv
    image: jsmit257/cffc:lkg
    pull_policy: daily
    restart: always
    hostname: cffcapi
    volumes: [ *photos ]
    env_file: *envs
    environment: { GOCOVERDIR: /tmp }

  cffc-web:
    #
    # hosts the static resources for the client huautla interface, proxies
    # requests for the cffc-api server, and proxies the entire userservice
    # application under the path `/authnz`
    #
    depends_on:
      - cffc-api
      - us-web
    image: jsmit257/cffc-web:lkg
    pull_policy: daily
    restart: always
    hostname: cffcweb
    ports:
      - 10080:80
      - 10443:443
    volumes:
      - ./www/css/images/background/:/www/css/images/background/
      # - ./www/css/:/www/css/custom/
      # - ./www/js/:/www/js/custom/
      - *photos
      # - ./www/certs/:/etc/nginx/certs/
    env_file: *envs

  #
  # all the following services are for initialization and maintenance; it's 
  # up to the user to schedule backups through whatever cron services 
  # provided by your OS; restore's are run manually as documented in the
  # README.md linked in the beginning of this file
  #

  huautla-source:
    #
    # provides the seed data to initialize a new huautla instance; this 
    # service is started by huautla-initialize and should be shutdown 
    # when initialization is finished running
    #
    image: jsmit257/huautla:lkg
    pull_policy: daily
    restart: always
    hostname: huautla-source
    env_file: [ ./env/secrets ]

  huautla-initialize:
    #
    # creates a persistent store for huautla data on the host filesystem so 
    # changes aren't lost between restarts; only run this once for a fresh
    # install (although you could start as many fresh installs as you like);
    #
    # it attatches to the same volume used by the huautla service and thus,
    # should not be running at the same time as huautla; once seeded, you won't
    # need to run this service ever again
    #
    depends_on: [ huautla-source ]
    image: jsmit257/huautla:lkg
    hostname: huautla-initialize
    volumes: [ "./persistence/huautla/data:/var/lib/postgresql/data" ]
    env_file: *envs
    entrypoint: sh -c "chown -Rv postgres:postgres /var/lib/postgresql && /migration-entrypoint.sh"

  huautla-backup:
    #
    # this is fine to run against a live server; it leaves an archive in the 
    # host's `persistence/huautla/backups` directory; use the archive to restore 
    # an errant database to some other point in time using huautla-restore
    #
    # backup and restore need no `.../data/` volume ebcause they *connect* to 
    # the live service, unlike initialization that runs once *instead of* the 
    # live service
    #
    # it would be a very good ideaâ„¢ to schedule this to run periodically,
    # and perhaps wipe old archives while we're at it; it would also be good 
    # to ship the archives elsewhere in case of local hardware failure
    #
    depends_on: [ huautla ]
    image: jsmit257/huautla:lkg
    hostname: huautla-backup
    volumes: [ "./persistence/huautla/backups:/pgbackup" ]
    env_file: *envs
    entrypoint: /backup-entrypoint.sh

  huautla-restore:
    #
    # usage: RESTORE_POINT=<archive> docker-compose up --remove-orphans huautla-restore
    #
    # restores the specified database to the state contained in <archive>; you
    # can find archives in the host directory called 'huautla-backups/'; the 
    # filenames are modified ISO timestamps like YYYYmmDDTHHMMSS, i.e:
    # year/month/day/hour/minute/second, so you can sort by name descending and 
    # get the latest archive names at the top, or choose an earlier one before any
    # corruption happened; for convenience, the most recent backup is symlinked
    # to the file named 'latest'
    #
    depends_on: [ huautla ]
    image: jsmit257/huautla:lkg
    hostname: huautla-restore
    volumes: [ "./persistence/huautla/backups:/pgbackup" ]
    env_file: *envs
    environment: { RESTORE_POINT: $RESTORE_POINT }
    entrypoint: /restore-entrypoint.sh

  us-initialize:
    #
    # works similarly to huautla-initialize, but it doesn't need seed data, 
    # so there's no corresponding huautla-source service; this image contains 
    # the initialization sql to build the database and leverages percona's default 
    # startup behavior to run it; this only needs to run once
    #
    image: jsmit257/us-db-mysql-mig:lkg
    pull_policy: daily
    hostname: us-initialize
    volumes: [ "./persistence/authnz/data:/var/lib/mysql" ]
    env_file: [ ./env/secrets ]
    # XXX: the same chown command works for huautla-initialize, why not here?
    # have to `chown 1001:1001 persistence/authnz/backups` manually, for now
    entrypoint: sh -c "chown -Rv mysql:mysql /var/lib/mysql && /var/lib/mysql-files/install-userservice.sh mysqld"

  us-backup:
    #
    # creates a mysql script to drop existing tables and recreate them, then 
    # insert all the data that existed at the time the backup ran; it does not
    # drop/create the database or any users, permissions, etc, and will *not* 
    # drop tables created since the backup was created; output file is zipped 
    # and symlinked to `latest` for convenience
    #
    depends_on: [ us-db ]
    image: jsmit257/us-db-mysql-mig:lkg
    hostname: us-backup
    volumes: [ "./persistence/authnz/backups:/mysqlbackup" ]
    env_file: *envs
    # XXX: still have to `chown 1001:1001 persistence/authnz/backups` before this 
    # will work, for now; only needs to be done once
    entrypoint: /mysql-backup.sh

  us-restore:
    #
    # send a backup script created by `us-backup` as described above to the 
    # persistent userservice database
    #
    depends_on: [ us-db ]
    image: jsmit257/us-db-mysql-mig:lkg
    hostname: us-restore
    volumes: [ "./persistence/authnz/backups:/mysqlbackup" ]
    env_file: *envs
    # XXX: assuming you already ran `chown ...` to create backup(s)
    entrypoint: /mysql-restore.sh
